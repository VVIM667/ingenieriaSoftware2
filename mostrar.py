<<<<<<< HEAD

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import END, Tk, Canvas, Entry, Text, Button, PhotoImage,ttk,VERTICAL
import subprocess
import csv
from tkinter import Scrollbar




#SCROLLBAR 


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame1")

#CLASE LIBRO
class Libro:
    def __init__(self, titulo, autor, genero, anio_publicacion, estado):
        self.titulo = titulo
        self.autor = autor
        self.genero = genero
        self.anio_publicacion = anio_publicacion
        self.estado = estado

# Definición de la clase Biblioteca
class Biblioteca: 
    def __init__(self):
        self.libros = []
        self.cargar_csv()

    def agregar_libro(self, libro):
        self.libros.append(libro)
        self.guardar_en_csv(libro)
        print("\nLibro registrado con éxito.")

    def cargar_csv(self):
        try:
            with open('biblioteca.csv', mode='r', newline='', encoding='utf-8') as file:
                reader = csv.reader(file)
                for row in reader:
                    if len(row) == 5:
                        libro = Libro(row[0], row[1], row[2], row[3], row[4])
                        self.libros.append(libro)
        except FileNotFoundError:
            pass

    def guardar_en_csv(self, libro):
        with open("biblioteca.csv", mode="a", newline='', encoding='utf-8') as file:
            escribir = csv.writer(file)
            escribir.writerow([libro.titulo, libro.autor, libro.genero, libro.anio_publicacion, libro.estado])

    def reservar_libro(self, titulo_libro):
        for libro in self.libros:
            if libro.titulo.lower() == titulo_libro.lower():
                if libro.estado == "Disponible":
                    libro.estado = "Reservado"
                    self.actualizar_csv()
                    print(f"Libro '{libro.titulo}' reservado con éxito.")
                    return
        print(f"El libro '{titulo_libro}' no se encuentra disponible para reserva.")

    def actualizar_csv(self):
        with open("biblioteca.csv", mode="w", newline='', encoding='utf-8') as file:
            escribir = csv.writer(file)
            for libro in self.libros:
                escribir.writerow([libro.titulo, libro.autor, libro.genero, libro.anio_publicacion, libro.estado])

    

    def mostrar_libros(self):
        lst = []
        for libro in self.libros:
            titulo = libro.titulo
            autor = libro.autor
            genero = libro.genero
            anio = libro.anio_publicacion
            estado = libro.estado

            tupla = (titulo,autor,genero,anio,estado)
            lst.append(tupla)

        return lst

        


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
=======
import pandas as pd
import tkinter as tk
from pandastable import Table
import subprocess
>>>>>>> 3b21701d9b89900a5ece1ee703ac63afbd8e8587

def regresar():
    window.destroy()
    subprocess.Popen('python principal.py', shell=True)

# Crea una ventana de tkinter
window = tk.Tk()
window.iconbitmap("icono.ico")
# Establece el tamaño de la ventana a 700x550
window.geometry("700x550")
window.title("Mostrar")

# Lee los datos del archivo CSV usando pandas
df = pd.read_csv('biblioteca.csv')

# Crea un Frame en la ventana de tkinter para la tabla
frame = tk.Frame(window)
frame.pack(fill='both', expand=True)

# Usa pandastable para crear una tabla y añadirla al Frame
pt = Table(frame, dataframe=df)

<<<<<<< HEAD



button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=regresar,
    relief="flat"
)
button_1.place(
    x=19.0,
    y=3.0,
    width=72.0,
    height=79.0
)
window.resizable(False, False)
=======
# Ajusta el ancho de las columnas para que se ajusten al contenido
pt.autoResizeColumns()
df = df.sort_values('Titulo')
pt.show()
>>>>>>> 3b21701d9b89900a5ece1ee703ac63afbd8e8587

# Crea un nuevo Frame para el botón
frame_boton = tk.Frame(window)
frame_boton.pack(fill='x', expand=False)

# Crea un botón de regresar dentro del nuevo Frame
boton_regresar = tk.Button(frame_boton, text="Regresar", command=regresar)
boton_regresar.pack(side='right')

<<<<<<< HEAD

def showbk():
    pass
    lst = []
    for libro in biblioteca.libros:
        titulo = libro.titulo
        autor = libro.autor
        genero = libro.genero
        anio = libro.anio_publicacion
        estado = libro.estado

        tupla = (titulo,autor,genero,anio,estado)
        lst.append(tupla)

    total_rows = len(lst)
    total_columns = len(lst[0])

    scrollbar = Scrollbar(entry_1, orient= VERTICAL)
    scrollbar.grid(row=0, column=total_columns, sticky='ns')

    entry_1.config(yscrollcommand=scrollbar.set)

    scrollbar.config(command=entry_1.yview)

    for i in range(total_rows):
            for j in range(total_columns):
                 
                e = Entry(entry_1, width=16,font=fuente, fg="#947A1F")
                e.grid(row=i, column=j)
                e.insert(END, lst[i][j])
                

showbk()
=======
# Inicia el bucle principal de tkinter
>>>>>>> 3b21701d9b89900a5ece1ee703ac63afbd8e8587

window.mainloop()
